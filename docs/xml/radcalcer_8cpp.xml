<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.3">
  <compounddef id="radcalcer_8cpp" kind="file">
    <compoundname>radcalcer.cpp</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes local="no">complex</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes refid="radcalcer_8h" local="yes">radcalcer.h</includes>
    <includes refid="constants_8h" local="yes">../constants.h</includes>
    <incdepgraph>
      <node id="156">
        <label>list</label>
      </node>
      <node id="146">
        <label>valarray</label>
      </node>
      <node id="142">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="147">
        <label>qperpdist.h</label>
        <link refid="qperpdist_8h"/>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
      </node>
      <node id="150">
        <label>Function.h</label>
        <link refid="Function_8h"/>
        <childnode refid="144" relation="include">
        </childnode>
      </node>
      <node id="139">
        <label>cmath</label>
      </node>
      <node id="155">
        <label>string</label>
      </node>
      <node id="138">
        <label>Gyulassy/opacity3/src/glv1/radcalcer.cpp</label>
        <link refid="radcalcer.cpp"/>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
      </node>
      <node id="154">
        <label>map</label>
      </node>
      <node id="144">
        <label>../Arrays.h</label>
        <link refid="Arrays_8h"/>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
      </node>
      <node id="151">
        <label>../Wrapper.h</label>
        <link refid="Wrapper_8h"/>
      </node>
      <node id="149">
        <label>qperparraynew.h</label>
        <link refid="qperparraynew_8h"/>
        <childnode refid="144" relation="include">
        </childnode>
      </node>
      <node id="148">
        <label>vector</label>
      </node>
      <node id="153">
        <label>../parameters.h</label>
        <link refid="parameters_8h"/>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>radcalcer.h</label>
        <link refid="radcalcer_8h"/>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>iostream</label>
      </node>
      <node id="152">
        <label>zcolldist.h</label>
        <link refid="zcolldist_8h"/>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>boost/multi_array.hpp</label>
      </node>
      <node id="141">
        <label>complex</label>
      </node>
      <node id="157">
        <label>../constants.h</label>
        <link refid="constants_8h"/>
        <childnode refid="148" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="radcalcer_8h" kindref="compound">radcalcer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">SwUtils;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="classRadCalcer_1e287ad55adcf2d34ac95c6d339337e42" refkind="member"><highlight class="normal"><ref refid="classRadCalcer_1e287ad55adcf2d34ac95c6d339337e42" kindref="member">RadCalcer::RadCalcer</ref>(<sp/><ref refid="classParameters" kindref="compound">Parameters</ref>&amp;<sp/>params_,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>opacity_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>correlated_<sp/>)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>:<sp/>zDist(<sp/>params_,<sp/>opacity_<sp/>),<sp/>qperps(<sp/>opacity_,<sp/>correlated_<sp/>),<sp/>n(<sp/>opacity_<sp/>)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>ReturnedParamsDouble;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>std::vector&lt;long&gt;<sp/>ReturnedParamsLong;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>std::list&lt;std::string&gt;<sp/>ReturnedParamsString;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>std::list&lt;std::string&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>we<sp/>get<sp/>the<sp/>parameters<sp/>of<sp/>the<sp/>medium</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is:<sp/>1st<sp/>=<sp/>mu,<sp/>2nd<sp/>=<sp/>temperature,<sp/>3rd<sp/>=<sp/>gluon<sp/>mass,<sp/>4th<sp/>=<sp/>gluon<sp/>mean<sp/>free<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Here,<sp/>we<sp/>only<sp/>need<sp/>the<sp/>gluon<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>zDist<sp/>will<sp/>need<sp/>the<sp/>others</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>ReturnedParamsDouble<sp/>=<sp/>params_.<ref refid="classParameters_1ff7eee6fabcdbdc7908b595814537f37" kindref="member" tooltip="Get the parameter set, but then convert to a vector of doubles.">GetParametersDouble</ref>(<sp/></highlight><highlight class="stringliteral">&quot;@mediumParams&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_18bbc6f788e02386e6799aa6658700ba1" kindref="member">_mg</ref><sp/>=<sp/>ReturnedParamsDouble[2];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>get<sp/>the<sp/>jet<sp/>flavour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>ReturnedParamsString<sp/>=<sp/>params_.<ref refid="classParameters_1aad6541e5440beed7c65ac9062109cfe" kindref="member" tooltip="Get a specific parameter in the map, identified by ParamID.">GetParametersString</ref>(<sp/></highlight><highlight class="stringliteral">&quot;@jetFlavour&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>std::string<sp/>jetFlavour<sp/>=<sp/>ReturnedParamsString.front();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jetFlavour<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Gluon&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_12401e88eb63c0b7525ab0bb9b1dff389" kindref="member">_cr</ref><sp/>=<sp/>3.;<sp/><ref refid="classRadCalcer_18b21a8e4e8314996883334d9ce95d78b" kindref="member">_mass</ref><sp/>=<sp/><ref refid="classRadCalcer_18bbc6f788e02386e6799aa6658700ba1" kindref="member">_mg</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jetFlavour<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_12401e88eb63c0b7525ab0bb9b1dff389" kindref="member">_cr</ref><sp/>=<sp/>4./3.;<sp/><ref refid="classRadCalcer_18b21a8e4e8314996883334d9ce95d78b" kindref="member">_mass</ref><sp/>=<sp/><ref refid="classRadCalcer_18bbc6f788e02386e6799aa6658700ba1" kindref="member">_mg</ref><sp/>/<sp/>sqrt(2);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jetFlavour<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Charm&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_12401e88eb63c0b7525ab0bb9b1dff389" kindref="member">_cr</ref><sp/>=<sp/>4./3.;<sp/><ref refid="classRadCalcer_18b21a8e4e8314996883334d9ce95d78b" kindref="member">_mass</ref><sp/>=<sp/>1.2;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jetFlavour<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Bottom&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_12401e88eb63c0b7525ab0bb9b1dff389" kindref="member">_cr</ref><sp/>=<sp/>4./3.;<sp/><ref refid="classRadCalcer_18b21a8e4e8314996883334d9ce95d78b" kindref="member">_mass</ref><sp/>=<sp/>4.75;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;@jetFlavour<sp/>not<sp/>understood&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>check<sp/>whether<sp/>also<sp/>specifying<sp/>a<sp/>jet<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>ReturnedParamsDouble<sp/>=<sp/>params_.<ref refid="classParameters_1ff7eee6fabcdbdc7908b595814537f37" kindref="member" tooltip="Get the parameter set, but then convert to a vector of doubles.">GetParametersDouble</ref>(<sp/></highlight><highlight class="stringliteral">&quot;@jetMassDirect&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ReturnedParamsDouble.size()<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_18b21a8e4e8314996883334d9ce95d78b" kindref="member">_mass</ref><sp/>=<sp/>ReturnedParamsDouble[0];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>the<sp/>momentum,<sp/>to<sp/>give<sp/>the<sp/>jet<sp/>energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>ReturnedParamsDouble<sp/>=<sp/>params_.<ref refid="classParameters_1ff7eee6fabcdbdc7908b595814537f37" kindref="member" tooltip="Get the parameter set, but then convert to a vector of doubles.">GetParametersDouble</ref>(<sp/></highlight><highlight class="stringliteral">&quot;@jetMomentum&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jetMomentum<sp/>=<sp/>ReturnedParamsDouble[0];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>calculate<sp/>and<sp/>set<sp/>energy,<sp/>and<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_1d815420ad92951fce8c20a4f86d6c236" kindref="member">_en</ref><sp/>=<sp/>sqrt(<sp/><ref refid="classRadCalcer_18b21a8e4e8314996883334d9ce95d78b" kindref="member">_mass</ref>*<ref refid="classRadCalcer_18b21a8e4e8314996883334d9ce95d78b" kindref="member">_mass</ref><sp/>+<sp/>jetMomentum*jetMomentum<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>jet<sp/>path<sp/>length<sp/>in<sp/>the<sp/>medium</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>ReturnedParamsDouble<sp/>=<sp/>params_.<ref refid="classParameters_1ff7eee6fabcdbdc7908b595814537f37" kindref="member" tooltip="Get the parameter set, but then convert to a vector of doubles.">GetParametersDouble</ref>(<sp/></highlight><highlight class="stringliteral">&quot;@pathLength&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_1635c673009cc00a1dceaa5e24a48b90c" kindref="member">_length</ref><sp/>=<sp/>ReturnedParamsDouble[0];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>setting<sp/>on<sp/>the<sp/>k<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>ReturnedParamsLong<sp/>=<sp/>params_.<ref refid="classParameters_1840169a79f0cdd8217e29b3b25a6552d" kindref="member" tooltip="Get the parameter set, but then convert to a vector of longs.">GetParametersLong</ref>(<sp/></highlight><highlight class="stringliteral">&quot;@limitSet&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_1f1ff30d453eb9d66719563097494fdad" kindref="member">_switchkmax</ref><sp/>=<sp/>ReturnedParamsLong[0];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>strong<sp/>coupling,<sp/>alpha_s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>ReturnedParamsString<sp/>=<sp/>params_.<ref refid="classParameters_1aad6541e5440beed7c65ac9062109cfe" kindref="member" tooltip="Get a specific parameter in the map, identified by ParamID.">GetParametersString</ref>(<sp/></highlight><highlight class="stringliteral">&quot;@alpha&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>ReturnedParamsString.begin();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*it<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;fixed&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_19f5300f48831979c9e3ded4590f436cd" kindref="member">_alphas</ref><sp/>=<sp/>boost::lexical_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(<sp/>*it<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Radcalcer,<sp/>@alpha<sp/>not<sp/>understood&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>ReturnedParamsString<sp/>=<sp/>params_.<ref refid="classParameters_1aad6541e5440beed7c65ac9062109cfe" kindref="member" tooltip="Get a specific parameter in the map, identified by ParamID.">GetParametersString</ref>(<sp/></highlight><highlight class="stringliteral">&quot;@incClassicalDiffusion&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ReturnedParamsString.front()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_18a346eab1c34a2283bbb3e94eea5ed23" kindref="member">_diffexclude</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ReturnedParamsString.front()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_18a346eab1c34a2283bbb3e94eea5ed23" kindref="member">_diffexclude</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Radcalcer,<sp/>@incClassicalDiffusion<sp/>not<sp/>understood<sp/>as<sp/>yes<sp/>or<sp/>no&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_13a2345f90a0d88ee72e25ebb1b558167" kindref="member">_correlated</ref><sp/>=<sp/>correlated_;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classRadCalcer_174df4f3bd387f06932e3b677ba2a84bb" refkind="member"><highlight class="normal"><ref refid="classRadCalcer_174df4f3bd387f06932e3b677ba2a84bb" kindref="member">RadCalcer::~RadCalcer</ref>()</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="classRadCalcer_1fbd62b63a05b0ee23a4a2fcb26b1ac6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRadCalcer_1fbd62b63a05b0ee23a4a2fcb26b1ac6c" kindref="member">RadCalcer::DistributeRandoms</ref>(<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>Randoms<sp/>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref><sp/>inZs(<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref><sp/>inQs(<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>),<sp/>inThs(<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>),<sp/>temps(<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>),<sp/>mu2s(<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref><sp/>qmins(<sp/>0.,<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>),<sp/>qmaxs(<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>),<sp/>thmins(<sp/>0.,<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>),<sp/>thmaxs(<sp/>2.*<ref refid="qperpgenerator3_8h_143016d873124d39034edb8cd164794db" kindref="member">pi</ref>,<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>get<sp/>an<sp/>array<sp/>of<sp/>uniform<sp/>random<sp/>inputs<sp/>for<sp/>z<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>inZs[i]<sp/>=<sp/>Randoms[i];</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_182e85452c812ca6fb30ed6dbddb8b31c" kindref="member">zDist</ref>.<ref refid="classZposGenerator_1167471398a46f21d1013cf97e3606736" kindref="member">FindRandomPositions</ref>(<sp/>inZs<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_182e85452c812ca6fb30ed6dbddb8b31c" kindref="member">zDist</ref>.<ref refid="classZposGenerator_1cae2647a7b06e0bb71b69b3616bf8a53" kindref="member">GetTempsMu2s</ref>(<sp/>temps,<sp/>mu2s<sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>get<sp/>an<sp/>array<sp/>of<sp/>uniform<sp/>random<sp/>inputs<sp/>for<sp/>qs,thetas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>calculate<sp/>qmaxs<sp/>from<sp/>medium<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n;<sp/>++i)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>inQs[i]<sp/>=<sp/>Randoms[i<sp/>+<sp/>n];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>inThs[i]<sp/>=<sp/>Randoms[i<sp/>+<sp/>2*n];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>qmaxs[i]<sp/>=<sp/>sqrt(6.*temps[i]*<ref refid="classRadCalcer_1d815420ad92951fce8c20a4f86d6c236" kindref="member">_en</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_1d40d18e64ee7f921f82d674818f42ec8" kindref="member" tooltip="Supply random numbers in inForQs, inForThs, generates random qs between qmins and...">FindRandomQs</ref>(<sp/>inQs,<sp/>qmins,<sp/>qmaxs,<sp/>inThs,<sp/>thmins,<sp/>thmaxs,<sp/>mu2s<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classRadCalcer_119c0def50051ee0a52a2cb311d8a485a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRadCalcer_119c0def50051ee0a52a2cb311d8a485a" kindref="member">RadCalcer::SetXonly</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_15e9cb8adf3bdf67e854e101aea092a73" kindref="member">_x</ref><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_1e84a98b07e5919fe1591a86967a46bad" kindref="member">_overx</ref><sp/>=<sp/>1./x;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_12dcf1fb0c50fa384f6b59055feaa4113" kindref="member">_dglv</ref><sp/>=<sp/><ref refid="classRadCalcer_18bbc6f788e02386e6799aa6658700ba1" kindref="member">_mg</ref>*<ref refid="classRadCalcer_18bbc6f788e02386e6799aa6658700ba1" kindref="member">_mg</ref>*(1.-<ref refid="classRadCalcer_15e9cb8adf3bdf67e854e101aea092a73" kindref="member">_x</ref>)<sp/>+<sp/><ref refid="classRadCalcer_18b21a8e4e8314996883334d9ce95d78b" kindref="member">_mass</ref>*<ref refid="classRadCalcer_18b21a8e4e8314996883334d9ce95d78b" kindref="member">_mass</ref>*<ref refid="classRadCalcer_15e9cb8adf3bdf67e854e101aea092a73" kindref="member">_x</ref>*<ref refid="classRadCalcer_15e9cb8adf3bdf67e854e101aea092a73" kindref="member">_x</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DeltaZi<sp/>is<sp/>in<sp/>fm,<sp/>_en<sp/>is<sp/>in<sp/>GeV<sp/>=&gt;<sp/>need<sp/>factor<sp/>hbarc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_13d123970055fd9730243b0d4a4295ab5" kindref="member">_frac</ref><sp/>=<sp/>1.<sp/>/<sp/>(2.<sp/>*<sp/><ref refid="classRadCalcer_15e9cb8adf3bdf67e854e101aea092a73" kindref="member">_x</ref><sp/>*<sp/><ref refid="classRadCalcer_1d815420ad92951fce8c20a4f86d6c236" kindref="member">_en</ref><sp/>*<sp/><ref refid="namespaceSwUtils_1d2fad768d402d77bfb40f4c87adb8966" kindref="member">hbarc</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classRadCalcer_149aa8982cec3cc56a881c843a74954e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRadCalcer_149aa8982cec3cc56a881c843a74954e7" kindref="member">RadCalcer::SetKonly</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//k<sp/>=<sp/>1.2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_1895774f8b53108c38336a31acc48f57f" kindref="member" tooltip="Set the k value.">SetK</ref>(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><ref refid="classRadCalcer_100c8fe44b15d733ae45a55fb3c5efbcb" kindref="member">_k</ref><sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classRadCalcer_1bd6b5fab0ce714f55b1d11776c02ba4d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classRadCalcer_1bd6b5fab0ce714f55b1d11776c02ba4d" kindref="member">RadCalcer::_interference</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="149"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>term1<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>term2<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>k=2;<sp/>k&lt;=m;<sp/>k++)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>term1<sp/>+=<sp/>(<ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_10ff4530994ec3cbb9ab9c4eb8813a8cd" kindref="member" tooltip="Get out the SumQiQj - passed straight onto QperpCalculator object.">GetSumQiQj</ref>(<sp/>k,<sp/>k<sp/>)+<ref refid="classRadCalcer_12dcf1fb0c50fa384f6b59055feaa4113" kindref="member">_dglv</ref>)<sp/>*<sp/><ref refid="classRadCalcer_182e85452c812ca6fb30ed6dbddb8b31c" kindref="member">zDist</ref>.<ref refid="classZposGenerator_1ff9cfd493e73f5d711f755c496c462f0" kindref="member">GetDeltaZi</ref>(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>term2<sp/>=<sp/>term1<sp/>+<sp/>(<ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_10ff4530994ec3cbb9ab9c4eb8813a8cd" kindref="member" tooltip="Get out the SumQiQj - passed straight onto QperpCalculator object.">GetSumQiQj</ref>(<sp/>1,<sp/>1<sp/>)+<ref refid="classRadCalcer_12dcf1fb0c50fa384f6b59055feaa4113" kindref="member">_dglv</ref>)<sp/>*<sp/><ref refid="classRadCalcer_182e85452c812ca6fb30ed6dbddb8b31c" kindref="member">zDist</ref>.<ref refid="classZposGenerator_1ff9cfd493e73f5d711f755c496c462f0" kindref="member">GetDeltaZi</ref>(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>cos(term1*<ref refid="classRadCalcer_13d123970055fd9730243b0d4a4295ab5" kindref="member">_frac</ref>)<sp/>-<sp/>cos(term2*_frac);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="classRadCalcer_16f89500579873100e9d69a79b5738c4b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classRadCalcer_16f89500579873100e9d69a79b5738c4b" kindref="member">RadCalcer::_interferenceExp</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="165"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result1,<sp/>result2;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omknLen;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//double<sp/>realpart<sp/>=<sp/>1.;<sp/>double<sp/>imagpart<sp/>=<sp/>0.;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*for<sp/>(<sp/>unsigned<sp/>long<sp/>k=2;<sp/>k&lt;=m;<sp/>++k<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/>omknLen<sp/>=<sp/>(qperps.GetSumQiQj(<sp/>k,<sp/>k<sp/>)+_dglv)*_frac<sp/>*<sp/>_length<sp/>/<sp/>static_cast&lt;double&gt;(n+1);</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/>realpart<sp/>=<sp/>realpart*1.<sp/>-<sp/>imagpart*omknLen;</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/>imagpart<sp/>=<sp/>imagpart*1.<sp/>+<sp/>realpart*omknLen;</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/>result1<sp/>=<sp/>realpart<sp/>/<sp/>(realpart*realpart<sp/>+<sp/>imagpart*imagpart);</highlight></codeline>
<codeline lineno="179"><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/>omknLen<sp/>=<sp/>(qperps.GetSumQiQj(<sp/>1,<sp/>1<sp/>)+_dglv)*_frac<sp/>*<sp/>_length<sp/>/<sp/>static_cast&lt;double&gt;(n+1);</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/>realpart<sp/>=<sp/>realpart*1.<sp/>-<sp/>imagpart*omknLen;</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/>imagpart<sp/>=<sp/>imagpart*1.<sp/>+<sp/>realpart*omknLen;</highlight></codeline>
<codeline lineno="183"><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/>result2<sp/>=<sp/>realpart<sp/>/<sp/>(realpart*realpart<sp/>+<sp/>imagpart*imagpart);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>std::complex&lt;double&gt;<sp/>den<sp/>=<sp/>std::complex&lt;double&gt;(1.,0.);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qpkk;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>k=2;<sp/>k&lt;=m;<sp/>++k<sp/>)<sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>qpkk<sp/>=<sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_10ff4530994ec3cbb9ab9c4eb8813a8cd" kindref="member" tooltip="Get out the SumQiQj - passed straight onto QperpCalculator object.">GetSumQiQj</ref>(<sp/>k,<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>omknLen<sp/>=<sp/>(qpkk+<ref refid="classRadCalcer_12dcf1fb0c50fa384f6b59055feaa4113" kindref="member">_dglv</ref>)*<ref refid="classRadCalcer_13d123970055fd9730243b0d4a4295ab5" kindref="member">_frac</ref><sp/>*<sp/><ref refid="classRadCalcer_1635c673009cc00a1dceaa5e24a48b90c" kindref="member">_length</ref><sp/>/<sp/>static_cast&lt;double&gt;(<ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref>+1);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>*=<sp/>std::complex&lt;double&gt;(<sp/>1.,<sp/>omknLen<sp/>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>result1<sp/>=<sp/>den.real()<sp/>/<sp/>(<sp/>pow(den.real(),2)<sp/>+<sp/>pow(den.imag(),2)<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>qpkk<sp/>=<sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_10ff4530994ec3cbb9ab9c4eb8813a8cd" kindref="member" tooltip="Get out the SumQiQj - passed straight onto QperpCalculator object.">GetSumQiQj</ref>(<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>omknLen<sp/>=<sp/>(qpkk+<ref refid="classRadCalcer_12dcf1fb0c50fa384f6b59055feaa4113" kindref="member">_dglv</ref>)*<ref refid="classRadCalcer_13d123970055fd9730243b0d4a4295ab5" kindref="member">_frac</ref><sp/>*<sp/><ref refid="classRadCalcer_1635c673009cc00a1dceaa5e24a48b90c" kindref="member">_length</ref><sp/>/<sp/>static_cast&lt;double&gt;(<ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref>+1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>den<sp/>*=<sp/>std::complex&lt;double&gt;(<sp/>1.,<sp/>omknLen<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>result2<sp/>=<sp/>den.real()<sp/>/<sp/>(<sp/>pow(den.real(),2)<sp/>+<sp/>pow(den.imag(),2)<sp/>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>result1<sp/>-<sp/>result2<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classRadCalcer_19d1b2bef2d32ed924de8a5bd0aaf748f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classRadCalcer_19d1b2bef2d32ed924de8a5bd0aaf748f" kindref="member">RadCalcer::_cdotb</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="207"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qs11<sp/>=<sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_10ff4530994ec3cbb9ab9c4eb8813a8cd" kindref="member" tooltip="Get out the SumQiQj - passed straight onto QperpCalculator object.">GetSumQiQj</ref>(<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qsmp1mp1<sp/>=<sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_10ff4530994ec3cbb9ab9c4eb8813a8cd" kindref="member" tooltip="Get out the SumQiQj - passed straight onto QperpCalculator object.">GetSumQiQj</ref>(<sp/>m+1,<sp/>m+1<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qsmm<sp/>=<sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_10ff4530994ec3cbb9ab9c4eb8813a8cd" kindref="member" tooltip="Get out the SumQiQj - passed straight onto QperpCalculator object.">GetSumQiQj</ref>(<sp/>m,<sp/>m<sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qs1m<sp/>=<sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_10ff4530994ec3cbb9ab9c4eb8813a8cd" kindref="member" tooltip="Get out the SumQiQj - passed straight onto QperpCalculator object.">GetSumQiQj</ref>(<sp/>1,<sp/>m<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qs1mp1<sp/>=<sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_10ff4530994ec3cbb9ab9c4eb8813a8cd" kindref="member" tooltip="Get out the SumQiQj - passed straight onto QperpCalculator object.">GetSumQiQj</ref>(<sp/>1,<sp/>m+1<sp/>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>(<sp/>qs1mp1/(qsmp1mp1+<ref refid="classRadCalcer_12dcf1fb0c50fa384f6b59055feaa4113" kindref="member">_dglv</ref>)<sp/>-<sp/>qs1m/(qsmm+<ref refid="classRadCalcer_12dcf1fb0c50fa384f6b59055feaa4113" kindref="member">_dglv</ref>)<sp/>)<sp/>/<sp/>(qs11+<ref refid="classRadCalcer_12dcf1fb0c50fa384f6b59055feaa4113" kindref="member">_dglv</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="classRadCalcer_1ccc5f82826c691219a05e4cb277bcc45" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRadCalcer_1ccc5f82826c691219a05e4cb277bcc45" kindref="member">RadCalcer::GetdNdk2dx</ref>(<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>results<sp/>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ok,<sp/>we&apos;re<sp/>going<sp/>to<sp/>calculate<sp/>dNdxdk,<sp/>and<sp/>fill<sp/>the<sp/>array<sp/>&apos;results&apos;<sp/>with<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>results[n-1]<sp/>=<sp/>the<sp/>full<sp/>answer,<sp/>the<sp/>others<sp/>are<sp/>just<sp/>intermediate<sp/>stages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>recording<sp/>scheme<sp/>are<sp/>we<sp/>going<sp/>by?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set<sp/>_maxOpac<sp/>=<sp/>n<sp/>here,<sp/>it<sp/>will<sp/>record<sp/>the<sp/>full<sp/>summation,<sp/>plus<sp/>n<sp/>subsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set<sp/>_maxOpac<sp/>=<sp/>2^n,<sp/>it<sp/>will<sp/>record<sp/>all<sp/>possible<sp/>subsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//long<sp/>_maxOpac<sp/>=<sp/>n;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//long<sp/>_maxOpac<sp/>=<sp/>power(2,n);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>_maxOpac<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>out<sp/>of<sp/>bounds<sp/>of<sp/>the<sp/>k<sp/>integral,<sp/>we<sp/>just<sp/>return<sp/>zero<sp/>for<sp/>all<sp/>the<sp/>whole<sp/>result<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classRadCalcer_100c8fe44b15d733ae45a55fb3c5efbcb" kindref="member">_k</ref><sp/>&gt;=<sp/><ref refid="classRadCalcer_12491363d38e009c91908bd78998acfbb" kindref="member">Getkmax</ref>()<sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;_maxOpac;<sp/>++i)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>results[i]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>intermediate<sp/>stages,<sp/>and<sp/>our<sp/>final<sp/>result:<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>msum,<sp/>qweight,<sp/>zweight,<sp/>coeff,<sp/>result;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>to<sp/>zero,<sp/>will<sp/>add<sp/>on<sp/>terms<sp/>to<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>medium<sp/>is<sp/>correlated,<sp/>then<sp/>we<sp/>need<sp/>to<sp/>iterate<sp/>over<sp/>all<sp/>the<sp/>permutations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>delta<sp/>functions<sp/>under<sp/>the<sp/>integral.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>medium<sp/>is<sp/>uncorrelated,<sp/>we<sp/>only<sp/>need<sp/>to<sp/>count<sp/>the<sp/>delta<sp/>functions,<sp/>not<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>separately<sp/>from<sp/>each.<sp/>In<sp/>this<sp/>way,<sp/>we<sp/>save<sp/>a<sp/>whole<sp/>lot<sp/>of<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>uncorrelated<sp/>medium.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>go<sp/>from<sp/>0&lt;z&lt;2^n<sp/>to<sp/>0&lt;z&lt;n.<sp/>Oooh,<sp/>orders<sp/>of<sp/>magnitude<sp/>performance<sp/>enhancement!<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classRadCalcer_13a2345f90a0d88ee72e25ebb1b558167" kindref="member">_correlated</ref><sp/>)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>all<sp/>terms<sp/>in<sp/>series<sp/>from<sp/>the<sp/>products<sp/>with<sp/>the<sp/>delta<sp/>function<sp/>subtracted<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Method:<sp/>count<sp/>from<sp/>1<sp/>up<sp/>to<sp/>2^n,<sp/>the<sp/>binary<sp/>representation<sp/>of<sp/>that<sp/>number<sp/>-<sp/>of<sp/>length<sp/>n<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gives<sp/>a<sp/>unique<sp/>set<sp/>of<sp/>zeroed<sp/>q&apos;s.<sp/>If<sp/>the<sp/>binary<sp/>digit<sp/>=<sp/>1,<sp/>then<sp/>that<sp/>q<sp/>is<sp/>zeroed<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>imin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>imax<sp/>=<sp/><ref refid="namespaceSwUtils_13974619c250bd02a70c9cfcd88384223" kindref="member">power</ref>(2,<ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>opac<sp/>is<sp/>to<sp/>do<sp/>with<sp/>what<sp/>we&apos;re<sp/>putting<sp/>in<sp/>the<sp/>results<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>increase<sp/>it<sp/>as<sp/>we<sp/>go<sp/>along.<sp/>Wow,<sp/>what<sp/>an<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>long<sp/>opac<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>results[n-1]<sp/>=<sp/>0.;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=imax-2;<sp/>i&gt;=imin;<sp/>--i)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>zeroed<sp/>Qs<sp/>for<sp/>this<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_1625dab8d6796160d279fb43d310593e2" kindref="member" tooltip="Set the combination of zeroed qs from an integer.">SetZeroedQs</ref>(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>over<sp/>all<sp/>the<sp/>c<sp/>dot<sp/>b<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msum<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>m<sp/>value<sp/>do<sp/>we<sp/>start<sp/>at?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mmin;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>want<sp/>to<sp/>only<sp/>look<sp/>at<sp/>the<sp/>quantum<sp/>source<sp/>term,<sp/>exclude<sp/>the<sp/>classical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>diffusion<sp/>terms,<sp/>then<sp/>we<sp/>start<sp/>at<sp/>n.<sp/>If<sp/>we<sp/>want<sp/>all<sp/>of<sp/>it,<sp/>then<sp/>we<sp/>start<sp/>at<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_18a346eab1c34a2283bbb3e94eea5ed23" kindref="member">_diffexclude</ref><sp/>?<sp/>mmin<sp/>=<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>:<sp/>mmin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>sum<sp/>is<sp/>defined<sp/>in<sp/>GLV<sp/>II.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m=mmin;<sp/>m&lt;=<ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref>;<sp/>++m)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>in<sp/>an<sp/>uncorrelated<sp/>medium,<sp/>then<sp/>we<sp/>do<sp/>the<sp/>z<sp/>integrals<sp/>analytically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>sum<sp/>up<sp/>the<sp/>resulting<sp/>Lorentzians.<sp/>If<sp/>not,<sp/>then<sp/>we<sp/>have<sp/>to<sp/>do<sp/>the<sp/>full<sp/>sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//msum<sp/>+=<sp/>-2.*_cdotb(<sp/>m<sp/>)<sp/>*<sp/>_interference(<sp/>m<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msum<sp/>+=<sp/>-2.*<ref refid="classRadCalcer_19d1b2bef2d32ed924de8a5bd0aaf748f" kindref="member">_cdotb</ref>(<sp/>m<sp/>)<sp/>*<sp/><ref refid="classRadCalcer_16f89500579873100e9d69a79b5738c4b" kindref="member">_interferenceExp</ref>(<sp/>m);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>q<sp/>weight<sp/>-<sp/>we<sp/>have<sp/>generated<sp/>random<sp/>q<sp/>values,<sp/>but<sp/>we<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>generating<sp/>from<sp/>a<sp/>different<sp/>distribution,<sp/>and<sp/>then<sp/>moving<sp/>a<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>the<sp/>answer.<sp/>See<sp/>reweighted<sp/>Monte-Carlo<sp/>integration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qweight<sp/>=<sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_1f40e5cf376bc3e80397e2e15f5c499b7" kindref="member" tooltip="Get the weight of the event, ie the ratio of the distribtutions from which the qs...">GetQeventWeight</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>for<sp/>the<sp/>z<sp/>weight.<sp/>Remember<sp/>that<sp/>we<sp/>might<sp/>not<sp/>even<sp/>be<sp/>evaluating<sp/>a<sp/>z<sp/>integral<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zweight<sp/>=<sp/><ref refid="classRadCalcer_182e85452c812ca6fb30ed6dbddb8b31c" kindref="member">zDist</ref>.<ref refid="classZposGenerator_14efcf84343b79a423e7dc356fd9d0261" kindref="member">GetZweight</ref>();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>add<sp/>what<sp/>we<sp/>have<sp/>to<sp/>what<sp/>we<sp/>had<sp/>from<sp/>the<sp/>previous<sp/>z<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>qweight<sp/>*<sp/>zweight<sp/>*<sp/>msum;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>at<sp/>a<sp/>power<sp/>of<sp/>2,<sp/>put<sp/>the<sp/>result<sp/>into<sp/>our<sp/>result<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(<sp/>i<sp/>==<sp/>imax-power(2,opac)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(n-opac)%2<sp/>==<sp/>0<sp/>?<sp/>results[opac-1]<sp/>=<sp/>result<sp/>:<sp/>results[opac-1]<sp/>=<sp/>-result;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>++opac;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>results[0]<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>left<sp/>out<sp/>a<sp/>few<sp/>coeffs<sp/>that<sp/>are<sp/>the<sp/>same<sp/>for<sp/>all<sp/>evaluations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>multiply<sp/>through<sp/>by<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>coeff<sp/>=<sp/><ref refid="classRadCalcer_100c8fe44b15d733ae45a55fb3c5efbcb" kindref="member">_k</ref><sp/>*<sp/><ref refid="classRadCalcer_1e84a98b07e5919fe1591a86967a46bad" kindref="member">_overx</ref><sp/>*<sp/><ref refid="glvradiative3_8h_1587fa85cc7ff0281ea1864c928c36cd5" kindref="member">overpi</ref><sp/><sp/>*<sp/><sp/><ref refid="classRadCalcer_12401e88eb63c0b7525ab0bb9b1dff389" kindref="member">_cr</ref>*<ref refid="classRadCalcer_19f5300f48831979c9e3ded4590f436cd" kindref="member">_alphas</ref>*2.;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=_maxOpac;<sp/>++i)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>results[i]<sp/>*=<sp/>coeff;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>we&apos;re<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>a<sp/>correlated<sp/>medium.<sp/>We<sp/>have<sp/>n<sp/>separate<sp/>contributions<sp/>(as<sp/>opposed<sp/>to<sp/>the<sp/>2^n<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>correlated<sp/>medium).<sp/>In<sp/>this<sp/>case,<sp/>z<sp/>will<sp/>represent<sp/>how<sp/>many<sp/>zeroed<sp/>q&apos;s<sp/>we<sp/>have.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>zmin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>zmax<sp/>=<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>combin;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>iterate<sp/>over<sp/>the<sp/>possible<sp/>zeroed<sp/>out<sp/>q&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z=zmax-1;<sp/>z&gt;=zmin;<sp/>--z)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>combinatoric<sp/>factor.<sp/>How<sp/>many<sp/>combinations?<sp/>=<sp/>n<sp/>C<sp/>z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>combin<sp/>=<sp/><ref refid="namespaceSwUtils_10183044c7c4da9b92fd4a0d94c5632f3" kindref="member">_Combinatoric</ref>(<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref>,<sp/>z<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>zeroed<sp/>Qs<sp/>for<sp/>this<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_1625dab8d6796160d279fb43d310593e2" kindref="member" tooltip="Set the combination of zeroed qs from an integer.">SetZeroedQs</ref>(<sp/>z<sp/>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>over<sp/>all<sp/>the<sp/>c<sp/>dot<sp/>b<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msum<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>m<sp/>value<sp/>do<sp/>we<sp/>start<sp/>at?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mmin;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>want<sp/>to<sp/>only<sp/>look<sp/>at<sp/>the<sp/>quantum<sp/>source<sp/>term,<sp/>exclude<sp/>the<sp/>classical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>diffusion<sp/>terms,<sp/>then<sp/>we<sp/>start<sp/>at<sp/>n.<sp/>If<sp/>we<sp/>want<sp/>all<sp/>of<sp/>it,<sp/>then<sp/>we<sp/>start<sp/>at<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classRadCalcer_18a346eab1c34a2283bbb3e94eea5ed23" kindref="member">_diffexclude</ref><sp/>?<sp/>mmin<sp/>=<sp/><ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref><sp/>:<sp/>mmin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>sum<sp/>is<sp/>defined<sp/>in<sp/>GLV<sp/>II.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m=mmin;<sp/>m&lt;=<ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref>;<sp/>++m)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>in<sp/>an<sp/>uncorrelated<sp/>medium,<sp/>then<sp/>we<sp/>do<sp/>the<sp/>z<sp/>integrals<sp/>analytically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>sum<sp/>up<sp/>the<sp/>resulting<sp/>Lorentzians.<sp/>If<sp/>not,<sp/>then<sp/>we<sp/>have<sp/>to<sp/>do<sp/>the<sp/>full<sp/>sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//msum<sp/>+=<sp/>-2.*_cdotb(<sp/>m<sp/>)<sp/>*<sp/>_interference(<sp/>m<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msum<sp/>+=<sp/>-2.*<ref refid="classRadCalcer_19d1b2bef2d32ed924de8a5bd0aaf748f" kindref="member">_cdotb</ref>(<sp/>m<sp/>)<sp/>*<sp/><ref refid="classRadCalcer_16f89500579873100e9d69a79b5738c4b" kindref="member">_interferenceExp</ref>(<sp/>m<sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>q<sp/>weight<sp/>-<sp/>we<sp/>have<sp/>generated<sp/>random<sp/>q<sp/>values,<sp/>but<sp/>we<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>generating<sp/>from<sp/>a<sp/>different<sp/>distribution,<sp/>and<sp/>then<sp/>moving<sp/>a<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>the<sp/>answer.<sp/>See<sp/>reweighted<sp/>Monte-Carlo<sp/>integration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qweight<sp/>=<sp/><ref refid="classRadCalcer_14bb0d69b33f9a4cf59c72a53419be16e" kindref="member">qperps</ref>.<ref refid="classQperpGenerator_1f40e5cf376bc3e80397e2e15f5c499b7" kindref="member" tooltip="Get the weight of the event, ie the ratio of the distribtutions from which the qs...">GetQeventWeight</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>for<sp/>the<sp/>z<sp/>weight.<sp/>Remember<sp/>that<sp/>we<sp/>might<sp/>not<sp/>even<sp/>be<sp/>evaluating<sp/>a<sp/>z<sp/>integral<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zweight<sp/>=<sp/><ref refid="classRadCalcer_182e85452c812ca6fb30ed6dbddb8b31c" kindref="member">zDist</ref>.<ref refid="classZposGenerator_14efcf84343b79a423e7dc356fd9d0261" kindref="member">GetZweight</ref>();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>add<sp/>what<sp/>we<sp/>have<sp/>to<sp/>what<sp/>we<sp/>had<sp/>from<sp/>the<sp/>previous<sp/>z<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>qweight<sp/>*<sp/>zweight<sp/>*<sp/>msum;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>results[<ref refid="classRadCalcer_12ef2f781f70d8bc4f21c6dfa8bf164bf" kindref="member">n</ref>-1-z]<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>left<sp/>out<sp/>a<sp/>few<sp/>coeffs<sp/>that<sp/>are<sp/>the<sp/>same<sp/>for<sp/>all<sp/>evaluations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>multiply<sp/>through<sp/>by<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>coeff<sp/>=<sp/><ref refid="classRadCalcer_100c8fe44b15d733ae45a55fb3c5efbcb" kindref="member">_k</ref><sp/>*<sp/><ref refid="classRadCalcer_1e84a98b07e5919fe1591a86967a46bad" kindref="member">_overx</ref><sp/>*<sp/><ref refid="glvradiative3_8h_1587fa85cc7ff0281ea1864c928c36cd5" kindref="member">overpi</ref><sp/><sp/>*<sp/><sp/><ref refid="classRadCalcer_12401e88eb63c0b7525ab0bb9b1dff389" kindref="member">_cr</ref>*<ref refid="classRadCalcer_19f5300f48831979c9e3ded4590f436cd" kindref="member">_alphas</ref>*2.;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=_maxOpac;<sp/>++i)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>results[i]<sp/>*=<sp/>coeff;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>we&apos;re<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/simon/Gyulassy/opacity3/src/glv1/radcalcer.cpp"/>
  </compounddef>
</doxygen>
