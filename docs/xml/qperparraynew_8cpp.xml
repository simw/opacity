<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.3">
  <compounddef id="qperparraynew_8cpp" kind="file">
    <compoundname>qperparraynew.cpp</compoundname>
    <includes refid="qperparraynew_8h" local="yes">qperparraynew.h</includes>
    <includes refid="constants_8h" local="yes">../constants.h</includes>
    <incdepgraph>
      <node id="88">
        <label>valarray</label>
      </node>
      <node id="84">
        <label>Gyulassy/opacity3/src/glv1/qperparraynew.cpp</label>
        <link refid="qperparraynew.cpp"/>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>../Arrays.h</label>
        <link refid="Arrays_8h"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>qperparraynew.h</label>
        <link refid="qperparraynew_8h"/>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>vector</label>
      </node>
      <node id="87">
        <label>boost/multi_array.hpp</label>
      </node>
      <node id="89">
        <label>../constants.h</label>
        <link refid="constants_8h"/>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="qperparraynew_8cpp_12038a405262755765309ef166e170a95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_FillFirstRow</definition>
        <argsstring>(unsigned long n, unsigned long z, std::vector&lt; bool &gt; zeroed, array2D &amp;qiqjs, array3D &amp;sumqiqjs)</argsstring>
        <name>_FillFirstRow</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>z</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt;</type>
          <declname>zeroed</declname>
        </param>
        <param>
          <type>array2D &amp;</type>
          <declname>qiqjs</declname>
        </param>
        <param>
          <type>array3D &amp;</type>
          <declname>sumqiqjs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="26" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="24" bodyend="47"/>
        <referencedby refid="qperparraynew_8cpp_1e6e4ce05ca5129920fbf7d9ef0a1e88f" compoundref="qperparraynew_8cpp" startline="66" endline="73">_FillAllRows2DSymmetric</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_1fa7bacdc3db3da4a62517d2518826fbc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_FillNextRow</definition>
        <argsstring>(unsigned long n, unsigned long i, unsigned long z, std::vector&lt; bool &gt; zeroed, array2D &amp;qiqjs, array3D &amp;sumqiqjs)</argsstring>
        <name>_FillNextRow</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>z</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt;</type>
          <declname>zeroed</declname>
        </param>
        <param>
          <type>array2D &amp;</type>
          <declname>qiqjs</declname>
        </param>
        <param>
          <type>array3D &amp;</type>
          <declname>sumqiqjs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="53" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="51" bodyend="61"/>
        <referencedby refid="qperparraynew_8cpp_1e6e4ce05ca5129920fbf7d9ef0a1e88f" compoundref="qperparraynew_8cpp" startline="66" endline="73">_FillAllRows2DSymmetric</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_1e6e4ce05ca5129920fbf7d9ef0a1e88f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_FillAllRows2DSymmetric</definition>
        <argsstring>(unsigned long n, array2D &amp;qiqjs, array3D &amp;sumqiqjs, long z)</argsstring>
        <name>_FillAllRows2DSymmetric</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>array2D &amp;</type>
          <declname>qiqjs</declname>
        </param>
        <param>
          <type>array3D &amp;</type>
          <declname>sumqiqjs</declname>
        </param>
        <param>
          <type>long</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="67" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="66" bodyend="73"/>
        <references refid="qperparraynew_8cpp_12038a405262755765309ef166e170a95" compoundref="qperparraynew_8cpp" startline="24" endline="47">_FillFirstRow</references>
        <references refid="qperparraynew_8cpp_1fa7bacdc3db3da4a62517d2518826fbc" compoundref="qperparraynew_8cpp" startline="51" endline="61">_FillNextRow</references>
        <references refid="namespaceSwUtils_11b9e53b0f01225242c82fe97e878bd6d" compoundref="constants_8h" startline="43" endline="49">SwUtils::_NumberToBoolArray</references>
        <referencedby refid="classQperpCalculator_1b8689c3b3d337993df82dbf0540812cd" compoundref="qperparraynew_8cpp" startline="248" endline="273">QperpCalculator::CalcQmatrices2</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_16e28f19c83c2c6e49a2672873048fd10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_FillAllRows1D</definition>
        <argsstring>(unsigned long n, array1D &amp;khatqis, array2D &amp;sumkhatqis, long z)</argsstring>
        <name>_FillAllRows1D</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>array1D &amp;</type>
          <declname>khatqis</declname>
        </param>
        <param>
          <type>array2D &amp;</type>
          <declname>sumkhatqis</declname>
        </param>
        <param>
          <type>long</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="76" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="75" bodyend="88"/>
        <references refid="namespaceSwUtils_11b9e53b0f01225242c82fe97e878bd6d" compoundref="constants_8h" startline="43" endline="49">SwUtils::_NumberToBoolArray</references>
        <referencedby refid="classQperpCalculator_1b8689c3b3d337993df82dbf0540812cd" compoundref="qperparraynew_8cpp" startline="248" endline="273">QperpCalculator::CalcQmatrices2</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_1d834a8fc7dd96237188220f0ed214a38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_Fill2DFrom1D</definition>
        <argsstring>(unsigned long n, array2D &amp;sumkhatqi_iton, array3D &amp;sumkhatqikhatqj_itonjton, long z)</argsstring>
        <name>_Fill2DFrom1D</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>array2D &amp;</type>
          <declname>sumkhatqi_iton</declname>
        </param>
        <param>
          <type>array3D &amp;</type>
          <declname>sumkhatqikhatqj_itonjton</declname>
        </param>
        <param>
          <type>long</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="92" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="90" bodyend="106"/>
        <referencedby refid="classQperpCalculator_1b8689c3b3d337993df82dbf0540812cd" compoundref="qperparraynew_8cpp" startline="248" endline="273">QperpCalculator::CalcQmatrices2</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_13b87a5052e73e5de13161681e25cf1fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_DotProducts2D</definition>
        <argsstring>(unsigned long n, MyArray &amp;mags, MyArray &amp;ths, array2D &amp;res)</argsstring>
        <name>_DotProducts2D</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>mags</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>ths</declname>
        </param>
        <param>
          <type>array2D &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="112" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="111" bodyend="141"/>
        <referencedby refid="classQperpCalculator_1b8689c3b3d337993df82dbf0540812cd" compoundref="qperparraynew_8cpp" startline="248" endline="273">QperpCalculator::CalcQmatrices2</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_1aea824af3e9dc625dd755fe24f0492b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_DotProducts1D</definition>
        <argsstring>(unsigned long n, double mag1, double th1, MyArray &amp;mags, MyArray &amp;ths, array1D &amp;res)</argsstring>
        <name>_DotProducts1D</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mag1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>th1</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>mags</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>ths</declname>
        </param>
        <param>
          <type>array1D &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="149" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="147" bodyend="157"/>
        <referencedby refid="classQperpCalculator_1b8689c3b3d337993df82dbf0540812cd" compoundref="qperparraynew_8cpp" startline="248" endline="273">QperpCalculator::CalcQmatrices2</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_17d756d821e729c3031739ae9168483e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_OuterProduct1D1D</definition>
        <argsstring>(unsigned long n, MyArray &amp;mags1, MyArray &amp;ths1, MyArray &amp;mags2, MyArray &amp;ths2, array2D &amp;res)</argsstring>
        <name>_OuterProduct1D1D</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>mags1</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>ths1</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>mags2</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>ths2</declname>
        </param>
        <param>
          <type>array2D &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="281" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="280" bodyend="291"/>
        <referencedby refid="classQperpCalculator_191e6a17cf817e4b361d6bc3187ec2095" compoundref="qperparraynew_8cpp" startline="358" endline="436">QperpCalculator::CalcQmatrices</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_1fc899dbd2fbe818860b4c384c52fb84f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_OuterProduct0D1D</definition>
        <argsstring>(unsigned long n, double mag1, double th1, MyArray &amp;mags2, MyArray &amp;ths2, array1D &amp;res)</argsstring>
        <name>_OuterProduct0D1D</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mag1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>th1</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>mags2</declname>
        </param>
        <param>
          <type>MyArray &amp;</type>
          <declname>ths2</declname>
        </param>
        <param>
          <type>array1D &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="294" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="293" bodyend="297"/>
        <referencedby refid="classQperpCalculator_191e6a17cf817e4b361d6bc3187ec2095" compoundref="qperparraynew_8cpp" startline="358" endline="436">QperpCalculator::CalcQmatrices</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_15e634626e89e347ac7105f3a34a7f065" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_Iterate2DForZeroes</definition>
        <argsstring>(unsigned long n, array2D &amp;qiqjs, array3D &amp;sumqiqjs)</argsstring>
        <name>_Iterate2DForZeroes</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>array2D &amp;</type>
          <declname>qiqjs</declname>
        </param>
        <param>
          <type>array3D &amp;</type>
          <declname>sumqiqjs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="302" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="301" bodyend="329"/>
        <references refid="namespaceSwUtils_11b9e53b0f01225242c82fe97e878bd6d" compoundref="constants_8h" startline="43" endline="49">SwUtils::_NumberToBoolArray</references>
        <referencedby refid="classQperpCalculator_191e6a17cf817e4b361d6bc3187ec2095" compoundref="qperparraynew_8cpp" startline="358" endline="436">QperpCalculator::CalcQmatrices</referencedby>
      </memberdef>
      <memberdef kind="function" id="qperparraynew_8cpp_19b9808a1bf16458a7ebdf81287337ec5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void @8::_Iterate1DForZeroes</definition>
        <argsstring>(unsigned long n, array1D &amp;khatqis, array2D &amp;sumkhatqis)</argsstring>
        <name>_Iterate1DForZeroes</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>array1D &amp;</type>
          <declname>khatqis</declname>
        </param>
        <param>
          <type>array2D &amp;</type>
          <declname>sumkhatqis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" line="332" bodyfile="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp" bodystart="331" bodyend="354"/>
        <references refid="namespaceSwUtils_11b9e53b0f01225242c82fe97e878bd6d" compoundref="constants_8h" startline="43" endline="49">SwUtils::_NumberToBoolArray</references>
        <referencedby refid="classQperpCalculator_191e6a17cf817e4b361d6bc3187ec2095" compoundref="qperparraynew_8cpp" startline="358" endline="436">QperpCalculator::CalcQmatrices</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="qperparraynew_8h" kindref="compound">qperparraynew.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">SwUtils;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FillRow<sp/>functions:<sp/>these<sp/>start<sp/>from<sp/>the<sp/>matrix<sp/>qiqjs<sp/>and<sp/>calculates<sp/>a<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>the<sp/>sums<sp/>of<sp/>qiqjs<sp/>-<sp/>the<sp/>(i,j)th<sp/>element<sp/>is<sp/>the<sp/>sum<sp/>of<sp/>all<sp/>qiqjs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>box<sp/>(i-&gt;n,<sp/>j-&gt;n).<sp/>In<sp/>the<sp/>interference<sp/>calculation,<sp/>these<sp/>are<sp/>the<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sums<sp/>that<sp/>are<sp/>necessary<sp/>to<sp/>calculate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>many<sp/>different<sp/>ways<sp/>of<sp/>doing<sp/>this,<sp/>but<sp/>here<sp/>is<sp/>an<sp/>implementation<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>only<sp/>evaluates<sp/>0.5*n(n+1)<sp/>sums.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Plus:<sp/>we<sp/>need<sp/>to<sp/>calculate<sp/>the<sp/>same<sp/>matrix,<sp/>but<sp/>with<sp/>specific<sp/>qi&apos;s<sp/>set<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>correlated<sp/>medium<sp/>(eg<sp/>variable<sp/>density),<sp/>there<sp/>are<sp/>2^n<sp/>different<sp/>permutations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>an<sp/>uncorrelated<sp/>geometry<sp/>(fixed<sp/>density),<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>calculate<sp/>anything<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>permutation<sp/>-<sp/>just<sp/>keep<sp/>the<sp/>original,<sp/>but<sp/>set<sp/>the<sp/>last<sp/>qi&apos;s<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_FillFirstRow:<sp/>fills<sp/>the<sp/>(n-1)th<sp/>row<sp/>and<sp/>column<sp/>of<sp/>sumqiqjs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="qperparraynew_8cpp_12038a405262755765309ef166e170a95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_12038a405262755765309ef166e170a95" kindref="member">_FillFirstRow</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z,<sp/>std::vector&lt;bool&gt;<sp/>zeroed,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref>&amp;<sp/>qiqjs,<sp/><ref refid="namespaceSwArrays_143b0dd0a084045f231ca949f96ba5ea1" kindref="member">array3D</ref>&amp;<sp/>sumqiqjs<sp/>)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>(n-1)th<sp/>row<sp/>is<sp/>zeroed,<sp/>jump<sp/>ahead<sp/>to<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zeroed[n-1])</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n;<sp/>++i)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumqiqjs[z][n-1][i]<sp/>=<sp/>0.;<sp/>sumqiqjs[z][i][n-1]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bottom<sp/>right<sp/>hand<sp/>corner<sp/>of<sp/>the<sp/>matrix<sp/>has<sp/>just<sp/>one<sp/>contribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>sumqiqjs[z][n-1][n-1]<sp/>=<sp/>qiqjs[n-1][n-1];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>fill<sp/>in<sp/>the<sp/>lower<sp/>row<sp/>and<sp/>the<sp/>right<sp/>most<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=2;<sp/>i&lt;(n+1);<sp/>++i)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumqiqjs[z][n-1][n-i]<sp/>=<sp/>sumqiqjs[z][n-1][n-i+1]<sp/>+<sp/>(!zeroed[n-i])*qiqjs[n-1][n-i];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumqiqjs[z][n-i][n-1]<sp/>=<sp/>sumqiqjs[z][n-1][n-i];</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_FillNextRow<sp/>-<sp/>having<sp/>done<sp/>the<sp/>summations<sp/>for<sp/>the<sp/>bottom<sp/>row<sp/>and<sp/>the<sp/>right<sp/>column,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>spread<sp/>out<sp/>the<sp/>results<sp/>to<sp/>the<sp/>next<sp/>row<sp/>and<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="qperparraynew_8cpp_1fa7bacdc3db3da4a62517d2518826fbc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_1fa7bacdc3db3da4a62517d2518826fbc" kindref="member">_FillNextRow</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i,<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z,<sp/>std::vector&lt;bool&gt;<sp/>zeroed,<sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref>&amp;<sp/>qiqjs,<sp/><ref refid="namespaceSwArrays_143b0dd0a084045f231ca949f96ba5ea1" kindref="member">array3D</ref>&amp;<sp/>sumqiqjs<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;(i+1);<sp/>++j)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>sumqiqjs[z][i][i-j]<sp/>=<sp/>sumqiqjs[z][i+1][i-j]<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>sumqiqjs[z][i][i-j+1]<sp/>-<sp/>sumqiqjs[z][i+1][i-j+1]<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(!zeroed[i])*(!zeroed[i-j])*qiqjs[i][i-j];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;(i+1);<sp/>++j)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>sumqiqjs[z][i-j][i]<sp/>=<sp/>sumqiqjs[z][i][i-j];</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_FillAllRows<sp/>-<sp/>driving<sp/>function<sp/>for<sp/>FillFirstRow<sp/>and<sp/>FillNextRow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>could<sp/>probably<sp/>do<sp/>this<sp/>by<sp/>a<sp/>recursive<sp/>function<sp/>that<sp/>calls<sp/>itself,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>do<sp/>it<sp/>the<sp/>simple<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="qperparraynew_8cpp_1e6e4ce05ca5129920fbf7d9ef0a1e88f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_1e6e4ce05ca5129920fbf7d9ef0a1e88f" kindref="member">_FillAllRows2DSymmetric</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref>&amp;<sp/>qiqjs,<sp/><ref refid="namespaceSwArrays_143b0dd0a084045f231ca949f96ba5ea1" kindref="member">array3D</ref>&amp;<sp/>sumqiqjs,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z<sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>zeroed(<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="namespaceSwUtils_11b9e53b0f01225242c82fe97e878bd6d" kindref="member">_NumberToBoolArray</ref>(<sp/>z,<sp/>zeroed,<sp/>n<sp/>);<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="qperparraynew_8cpp_12038a405262755765309ef166e170a95" kindref="member">_FillFirstRow</ref>(<sp/>n,<sp/>z,<sp/>zeroed,<sp/>qiqjs,<sp/>sumqiqjs<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=2;<sp/>i&lt;(n+1);<sp/>++i)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="qperparraynew_8cpp_1fa7bacdc3db3da4a62517d2518826fbc" kindref="member">_FillNextRow</ref>(<sp/>n,<sp/>n-i,<sp/>z,<sp/>zeroed,<sp/>qiqjs,<sp/>sumqiqjs<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="qperparraynew_8cpp_16e28f19c83c2c6e49a2672873048fd10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_16e28f19c83c2c6e49a2672873048fd10" kindref="member">_FillAllRows1D</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="namespaceSwArrays_1a711e1d51bc667c98e69285d33513165" kindref="member">array1D</ref>&amp;<sp/>khatqis,<sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref>&amp;<sp/>sumkhatqis,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z<sp/>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>be<sp/>stepping<sp/>through<sp/>setting<sp/>each<sp/>qi<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>vector<sp/>of<sp/>bools<sp/>to<sp/>indicate<sp/>which<sp/>qi<sp/>is<sp/>zero<sp/>for<sp/>this<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>zeroed(<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>number<sp/>z<sp/>to<sp/>an<sp/>array<sp/>of<sp/>bools,<sp/>the<sp/>ith<sp/>element<sp/>saying<sp/>whether<sp/>qi<sp/>should<sp/>be<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="namespaceSwUtils_11b9e53b0f01225242c82fe97e878bd6d" kindref="member">_NumberToBoolArray</ref>(<sp/>z,<sp/>zeroed,<sp/>n<sp/>);<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Starting<sp/>point<sp/>for<sp/>the<sp/>iteration:<sp/>(n-1)th<sp/>has<sp/>just<sp/>one<sp/>element,<sp/>khat.q_{n-1}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>sumkhatqis[z][n-1]<sp/>=<sp/>(!zeroed[n-1])*khatqis[n-1];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>iterate<sp/>over<sp/>the<sp/>rest,<sp/>adding<sp/>one<sp/>khatqi<sp/>at<sp/>each<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=2;<sp/>i&lt;(n+1);<sp/>++i)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>sumkhatqis[z][n-i]<sp/>=<sp/>sumkhatqis[z][n-i+1]<sp/>+<sp/>(!zeroed[n-i])*khatqis[n-i];</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="qperparraynew_8cpp_1d834a8fc7dd96237188220f0ed214a38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_1d834a8fc7dd96237188220f0ed214a38" kindref="member">_Fill2DFrom1D</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref>&amp;<sp/>sumkhatqi_iton,<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceSwArrays_143b0dd0a084045f231ca949f96ba5ea1" kindref="member">array3D</ref>&amp;<sp/>sumkhatqikhatqj_itonjton,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z<sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n;<sp/>++i)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>++j)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumkhatqikhatqj_itonjton[z][i][j]<sp/>=<sp/>sumkhatqi_iton[z][i]<sp/>+<sp/>sumkhatqi_iton[z][j];</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>sumkhatqikhatqj_itonjton[z][i][n]<sp/>=<sp/>sumkhatqi_iton[z][i];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>++j)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>sumkhatqikhatqj_itonjton[z][n][j]<sp/>=<sp/>sumkhatqi_iton[z][j];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>sumkhatqikhatqj_itonjton[z][n][n]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_DotProducts2D:<sp/>want<sp/>qi.qj.<sp/>Take<sp/>n<sp/>vectors,<sp/>expressed<sp/>in<sp/>polar<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(<sp/>magnitudes<sp/>mags,<sp/>polar<sp/>vectors<sp/>ths<sp/>),<sp/>and<sp/>fill<sp/>the<sp/>2<sp/>dimension<sp/>nxn<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>res<sp/>with<sp/>the<sp/>results<sp/>qi.qj</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="qperparraynew_8cpp_13b87a5052e73e5de13161681e25cf1fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_13b87a5052e73e5de13161681e25cf1fa" kindref="member">_DotProducts2D</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>mags,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>ths,<sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref>&amp;<sp/>res<sp/>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>put<sp/>in<sp/>asserts<sp/>to<sp/>check<sp/>that<sp/>the<sp/>dimensions<sp/>of<sp/>mags,<sp/>ths<sp/>and<sp/>res<sp/>are<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>operations<sp/>sin<sp/>and<sp/>cos<sp/>are<sp/>numerically<sp/>expensive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>dot<sp/>products:<sp/>will<sp/>need<sp/>cos(<sp/>ths[i]<sp/>-<sp/>ths[j]<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/>cos(ths[i])<sp/>cos(ths[j])<sp/>+<sp/>sin(ths[i])<sp/>sin(ths[j])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Here:<sp/>evaluate<sp/>them<sp/>2n<sp/>times,<sp/>instead<sp/>of<sp/>possibly<sp/>n^2<sp/>or<sp/>0.5*n(n+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref><sp/>sines(n),<sp/>cosines(n);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=n;<sp/>++i)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>sines[i]<sp/>=<sp/>sin(<sp/>ths[i]<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>cosines[i]<sp/>=<sp/>cos(<sp/>ths[i]<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>find<sp/>the<sp/>2D<sp/>matrix<sp/>qi.qj</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>know<sp/>that<sp/>it<sp/>is<sp/>symmetric,<sp/>so<sp/>first<sp/>we&apos;ll<sp/>evaluate<sp/>the<sp/>off-diagonal<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>side,<sp/>then<sp/>mirror<sp/>it<sp/>over<sp/>to<sp/>the<sp/>other<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=n;<sp/>++i)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=i+1;<sp/>j!=n;<sp/>++j)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res[i][j]<sp/>=<sp/>mags[i]<sp/>*<sp/>mags[j]<sp/>*<sp/>(<sp/>cosines[i]*cosines[j]<sp/>+<sp/>sines[i]*sines[j]<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res[j][i]<sp/>=<sp/>res[i][j];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>all<sp/>that&apos;s<sp/>left<sp/>is<sp/>the<sp/>diagonal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=n;<sp/>++i)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>res[i][i]<sp/>=<sp/>mags[i]<sp/>*<sp/>mags[i];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>we&apos;re<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_DotProducts1D:<sp/>want<sp/>k.qi.<sp/>Take<sp/>n<sp/>vectors,<sp/>expressed<sp/>in<sp/>polar<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(<sp/>magnitudes<sp/>mags,<sp/>polar<sp/>vectors<sp/>ths<sp/>)<sp/>and<sp/>dot<sp/>into<sp/>one<sp/>fixed<sp/>vector<sp/>(mag1,<sp/>th1),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>give<sp/>the<sp/>1<sp/>dimensional<sp/>array<sp/>res</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="qperparraynew_8cpp_1aea824af3e9dc625dd755fe24f0492b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_1aea824af3e9dc625dd755fe24f0492b2" kindref="member">_DotProducts1D</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mag1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th1,<sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>mags,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>ths,<sp/><ref refid="namespaceSwArrays_1a711e1d51bc667c98e69285d33513165" kindref="member">array1D</ref>&amp;<sp/>res<sp/>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>put<sp/>in<sp/>asserts<sp/>to<sp/>check<sp/>that<sp/>the<sp/>dimensions<sp/>of<sp/>mags,<sp/>ths<sp/>and<sp/>res<sp/>are<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>pre-calculate<sp/>the<sp/>cosine<sp/>this<sp/>time,<sp/>we&apos;ll<sp/>just<sp/>jump<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=n;<sp/>++i)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>res[i]<sp/>=<sp/>mag1<sp/>*<sp/>mags[i]<sp/>*<sp/>cos(<sp/>th1<sp/>-<sp/>ths[i]<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>we&apos;re<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>the<sp/>unnamed<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classQperpCalculator_1303da9d3465defdf4db40aa77ad6ecbb" refkind="member"><highlight class="normal"><ref refid="classQperpCalculator_1303da9d3465defdf4db40aa77ad6ecbb" kindref="member">QperpCalculator::QperpCalculator</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>correlated_<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>:<sp/>n(n_),<sp/>correlated(correlated_),<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>qs(<sp/>n_<sp/>),<sp/>ths(<sp/>n_<sp/>),</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>qiqj(<sp/>boost::extents[n_][n_]<sp/>),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>thk(<ref refid="qperpgenerator3_8h_143016d873124d39034edb8cd164794db" kindref="member">pi</ref>),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>khatqi(<sp/>boost::extents[n_]<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_1495417f5f60bfda90c642d5f41dd36c0" kindref="member" tooltip="There are 2^n different permutations of setting each q to zero, pre calculate this...">twotothen</ref><sp/>=<sp/><ref refid="namespaceSwUtils_13974619c250bd02a70c9cfcd88384223" kindref="member">power</ref>(2,<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classQperpCalculator_1280126db21bf9e1304eeef3f770aed71" kindref="member" tooltip="Are we dealing with a correlated medium? 0 = no, 1 = yes.">correlated</ref>==0<sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref>.resize(<sp/>boost::extents[1][<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>+1][<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>+1]<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>.resize(<sp/>boost::extents[1][<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>]<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_17165df38a37208799ef9ec17680349bb" kindref="member" tooltip="Sum of khat.q_i summed from i to n and j to n.">sumkhatqikhatqj_itonjton</ref>.resize(<sp/>boost::extents[1][n+1][n+1]<sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_1ff93029d6851593b41ce57b9221a9113" kindref="member" tooltip="Sum of k.q_i summed from i to n and j to n - ie depdendent on k.">sumkqikqj_itonjton</ref>.resize(<sp/>boost::extents[1][n+1][n+1]<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref>.resize(<sp/>boost::extents[<ref refid="classQperpCalculator_1495417f5f60bfda90c642d5f41dd36c0" kindref="member" tooltip="There are 2^n different permutations of setting each q to zero, pre calculate this...">twotothen</ref>][<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>+1][<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>+1]<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>.resize(<sp/>boost::extents[<ref refid="classQperpCalculator_1495417f5f60bfda90c642d5f41dd36c0" kindref="member" tooltip="There are 2^n different permutations of setting each q to zero, pre calculate this...">twotothen</ref>][<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>]<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_17165df38a37208799ef9ec17680349bb" kindref="member" tooltip="Sum of khat.q_i summed from i to n and j to n.">sumkhatqikhatqj_itonjton</ref>.resize(<sp/>boost::extents[<ref refid="classQperpCalculator_1495417f5f60bfda90c642d5f41dd36c0" kindref="member" tooltip="There are 2^n different permutations of setting each q to zero, pre calculate this...">twotothen</ref>][n+1][n+1]<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_1ff93029d6851593b41ce57b9221a9113" kindref="member" tooltip="Sum of k.q_i summed from i to n and j to n - ie depdendent on k.">sumkqikqj_itonjton</ref>.resize(<sp/>boost::extents[<ref refid="classQperpCalculator_1495417f5f60bfda90c642d5f41dd36c0" kindref="member" tooltip="There are 2^n different permutations of setting each q to zero, pre calculate this...">twotothen</ref>][n+1][n+1]<sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="classQperpCalculator_1e0d39a269d3ad4ac9511f21b2a6897d5" refkind="member"><highlight class="normal"><ref refid="classQperpCalculator_1e0d39a269d3ad4ac9511f21b2a6897d5" kindref="member">QperpCalculator::~QperpCalculator</ref>()</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="classQperpCalculator_10ec8c93039d650234ac1d2869e7ef5ec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_10ec8c93039d650234ac1d2869e7ef5ec" kindref="member" tooltip="Set the z value - ie which &amp;#39;zeroes&amp;#39; value we want.">QperpCalculator::SetZ</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z_<sp/>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_12eadd4a22a9ce50636a382b7e45e4de0" kindref="member" tooltip="Store2D the z value, ie the zeroes.">zin</ref><sp/>=<sp/>z_;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classQperpCalculator_1280126db21bf9e1304eeef3f770aed71" kindref="member" tooltip="Are we dealing with a correlated medium? 0 = no, 1 = yes.">correlated</ref><sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="classQperpCalculator_1dcc7f0c758be4911f5599b349d0fe9d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_1dcc7f0c758be4911f5599b349d0fe9d1" kindref="member" tooltip="Retrieve the result - sum of q_i.q_j from i to (n+1), j to (n+1) including k.q_i...">QperpCalculator::GetSumQiQj</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i_,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j_,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z_<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="205"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>i_-1;<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>j_-1;<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>z_;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="classQperpCalculator_1280126db21bf9e1304eeef3f770aed71" kindref="member" tooltip="Are we dealing with a correlated medium? 0 = no, 1 = yes.">correlated</ref><sp/>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>z)<sp/>i<sp/>=<sp/>z_;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>z)<sp/>j<sp/>=<sp/>z_;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>boost::array&lt;array3D::index,3&gt;<sp/>idx<sp/>=<sp/>{{z,i,j}};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref>(<sp/>idx<sp/>)<sp/>+<sp/><ref refid="classQperpCalculator_1ff93029d6851593b41ce57b9221a9113" kindref="member" tooltip="Sum of k.q_i summed from i to n and j to n - ie depdendent on k.">sumkqikqj_itonjton</ref>(<sp/>idx<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="classQperpCalculator_183253dd333b2c68cfab6b403f1b59024" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_183253dd333b2c68cfab6b403f1b59024" kindref="member" tooltip="Set the magnitude of the k vector (direction is always in fixed direction).">QperpCalculator::SetK</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k_<sp/>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_1c17016ee4dcd57344199ca4d8dd43eb2" kindref="member" tooltip="k vector magnitude - the emitted gluon">k</ref><sp/>=<sp/>k_;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k2<sp/>=<sp/><ref refid="classQperpCalculator_1c17016ee4dcd57344199ca4d8dd43eb2" kindref="member" tooltip="k vector magnitude - the emitted gluon">k</ref>*<ref refid="classQperpCalculator_1c17016ee4dcd57344199ca4d8dd43eb2" kindref="member" tooltip="k vector magnitude - the emitted gluon">k</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>zmax;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_1280126db21bf9e1304eeef3f770aed71" kindref="member" tooltip="Are we dealing with a correlated medium? 0 = no, 1 = yes.">correlated</ref><sp/>?<sp/>zmax<sp/>=<sp/><ref refid="classQperpCalculator_1495417f5f60bfda90c642d5f41dd36c0" kindref="member" tooltip="There are 2^n different permutations of setting each q to zero, pre calculate this...">twotothen</ref>-1<sp/>:<sp/>zmax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="namespaceSwArrays_143df59437e7dfa7838e5d23628e245b8" kindref="member">index3D</ref><sp/>z=0;<sp/>z&lt;=zmax;<sp/>++z<sp/>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespaceSwArrays_143df59437e7dfa7838e5d23628e245b8" kindref="member">index3D</ref><sp/>i=0;<sp/>i&lt;<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>+1;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespaceSwArrays_143df59437e7dfa7838e5d23628e245b8" kindref="member">index3D</ref><sp/>j=0;<sp/>j&lt;n+1;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_1ff93029d6851593b41ce57b9221a9113" kindref="member" tooltip="Sum of k.q_i summed from i to n and j to n - ie depdendent on k.">sumkqikqj_itonjton</ref>[z][i][j]<sp/>=<sp/><ref refid="classQperpCalculator_17165df38a37208799ef9ec17680349bb" kindref="member" tooltip="Sum of khat.q_i summed from i to n and j to n.">sumkhatqikhatqj_itonjton</ref>[z][i][j]<sp/>*<sp/>k<sp/>+<sp/>k2;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classQperpCalculator_15161016f7562736d9de2ddbd71d64c3e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_15161016f7562736d9de2ddbd71d64c3e" kindref="member" tooltip="Set the input array of q-vectors, ths is relative to the fixed direction of k.">QperpCalculator::SetQperps</ref>(<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>qs_,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>ths_<sp/>)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_1a8eaec51683b81cf9ae2517b8adaff1b" kindref="member" tooltip="The magnitudes of the q vectors.">qs</ref><sp/>=<sp/>qs_;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_15b6c7450c187157952abdb77f16be332" kindref="member" tooltip="The polar angles of the q vectors (this is q_perp, ie effectively only 2D vector)...">ths</ref><sp/>=<sp/>ths_;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_1b8689c3b3d337993df82dbf0540812cd" kindref="member">CalcQmatrices2</ref>();</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalcQmatrices2:<sp/>once<sp/>we<sp/>have<sp/>received<sp/>a<sp/>set<sp/>of<sp/>q<sp/>vectors,<sp/>calculate<sp/>all<sp/>the<sp/>qiqjs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>sumqiqjs,<sp/>as<sp/>well<sp/>as<sp/>khatqis<sp/>and<sp/>sumkhatqis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classQperpCalculator_1b8689c3b3d337993df82dbf0540812cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_1b8689c3b3d337993df82dbf0540812cd" kindref="member">QperpCalculator::CalcQmatrices2</ref>()</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Here,<sp/>we<sp/>pre-calculate<sp/>all<sp/>the<sp/>necessary<sp/>qi.qj<sp/>elements<sp/>and<sp/>their<sp/>useful<sp/>sums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ll<sp/>also<sp/>calculate<sp/>the<sp/>angular<sp/>part<sp/>of<sp/>k.qi,<sp/>but<sp/>we&apos;ll<sp/>keep<sp/>the<sp/>magnitude<sp/>of<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generic<sp/>at<sp/>the<sp/>moment.<sp/>This<sp/>way,<sp/>we<sp/>can<sp/>iterate<sp/>over<sp/>all<sp/>possible<sp/>k<sp/>magnitudes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>one<sp/>set<sp/>of<sp/>qi.qj&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>calculate<sp/>all<sp/>qi.qj<sp/>elements.<sp/>This<sp/>fills<sp/>2D<sp/>matrix<sp/>qiqj<sp/>with<sp/>qi.qj<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="qperparraynew_8cpp_13b87a5052e73e5de13161681e25cf1fa" kindref="member">_DotProducts2D</ref>(<sp/><ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>,<sp/><ref refid="classQperpCalculator_1a8eaec51683b81cf9ae2517b8adaff1b" kindref="member" tooltip="The magnitudes of the q vectors.">qs</ref>,<sp/><ref refid="classQperpCalculator_15b6c7450c187157952abdb77f16be332" kindref="member" tooltip="The polar angles of the q vectors (this is q_perp, ie effectively only 2D vector)...">ths</ref>,<sp/><ref refid="classQperpCalculator_19e589b4cf203e6289b99e459de6ad665" kindref="member" tooltip="Array of vector q_i dot q_j.">qiqj</ref><sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>calculate<sp/>k.qi<sp/>elements<sp/>for<sp/>unit<sp/>vector<sp/>k.<sp/>This<sp/>fills<sp/>khatqi.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="qperparraynew_8cpp_1aea824af3e9dc625dd755fe24f0492b2" kindref="member">_DotProducts1D</ref>(<sp/><ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>,<sp/>1.,<sp/><ref refid="classQperpCalculator_10976c2203a868d6095fd4f7e8d5ce0ca" kindref="member" tooltip="k vector polar angle">thk</ref>,<sp/><ref refid="classQperpCalculator_1a8eaec51683b81cf9ae2517b8adaff1b" kindref="member" tooltip="The magnitudes of the q vectors.">qs</ref>,<sp/><ref refid="classQperpCalculator_15b6c7450c187157952abdb77f16be332" kindref="member" tooltip="The polar angles of the q vectors (this is q_perp, ie effectively only 2D vector)...">ths</ref>,<sp/><ref refid="classQperpCalculator_1eb7a7adbe702a6cd3a94e122fd09178c" kindref="member" tooltip="Array of khat dot q_i (ie khat is unit vector, independent of k magnitude).">khatqi</ref><sp/>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>iterate<sp/>over<sp/>all<sp/>sets<sp/>of<sp/>zeroed<sp/>out<sp/>q&apos;s,<sp/>if<sp/>we<sp/>have<sp/>a<sp/>correlated<sp/>medium</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>zmax;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_1280126db21bf9e1304eeef3f770aed71" kindref="member" tooltip="Are we dealing with a correlated medium? 0 = no, 1 = yes.">correlated</ref><sp/>?<sp/>zmax<sp/>=<sp/><ref refid="classQperpCalculator_1495417f5f60bfda90c642d5f41dd36c0" kindref="member" tooltip="There are 2^n different permutations of setting each q to zero, pre calculate this...">twotothen</ref>-1<sp/>:<sp/>zmax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z=0;<sp/>z&lt;=zmax;<sp/>++z)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>want<sp/>to<sp/>fill<sp/>the<sp/>2D<sp/>matrix<sp/>sumqiqj_itonjton.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="qperparraynew_8cpp_1e6e4ce05ca5129920fbf7d9ef0a1e88f" kindref="member">_FillAllRows2DSymmetric</ref>(<sp/><ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>,<sp/><ref refid="classQperpCalculator_19e589b4cf203e6289b99e459de6ad665" kindref="member" tooltip="Array of vector q_i dot q_j.">qiqj</ref>,<sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref>,<sp/>z<sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>filling<sp/>sumkhatqi_iton<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="qperparraynew_8cpp_16e28f19c83c2c6e49a2672873048fd10" kindref="member">_FillAllRows1D</ref>(<sp/><ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>,<sp/><ref refid="classQperpCalculator_1eb7a7adbe702a6cd3a94e122fd09178c" kindref="member" tooltip="Array of khat dot q_i (ie khat is unit vector, independent of k magnitude).">khatqi</ref>,<sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>,<sp/>z<sp/>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>1D<sp/>khatqi_iton<sp/>into<sp/>a<sp/>2D<sp/>khatqikhatqj<sp/>ready<sp/>for<sp/>adding<sp/>to<sp/>qiqj_itonjton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="qperparraynew_8cpp_1d834a8fc7dd96237188220f0ed214a38" kindref="member">_Fill2DFrom1D</ref>(<sp/><ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>,<sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>,<sp/><ref refid="classQperpCalculator_17165df38a37208799ef9ec17680349bb" kindref="member" tooltip="Sum of khat.q_i summed from i to n and j to n.">sumkhatqikhatqj_itonjton</ref>,<sp/>z<sp/>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>old<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="qperparraynew_8cpp_17d756d821e729c3031739ae9168483e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_17d756d821e729c3031739ae9168483e4" kindref="member">_OuterProduct1D1D</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>mags1,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>ths1,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>mags2,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>ths2,<sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref>&amp;<sp/>res<sp/>)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=n;<sp/>++i)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=i+1;<sp/>j!=n;<sp/>++j)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res[i][j]<sp/>=<sp/>mags1[i]<sp/>*<sp/>mags2[j]<sp/>*<sp/>cos(<sp/>ths1[i]<sp/>-<sp/>ths2[j]<sp/>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res[j][i]<sp/>=<sp/>res[i][j];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=n;<sp/>++i)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>res[i][i]<sp/>=<sp/>mags1[i]<sp/>*<sp/>mags2[i];</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="qperparraynew_8cpp_1fc899dbd2fbe818860b4c384c52fb84f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_1fc899dbd2fbe818860b4c384c52fb84f" kindref="member">_OuterProduct0D1D</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mag1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th1,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>mags2,<sp/><ref refid="namespaceSwArrays_1817a6066415ba9925ccc7d7574a4845b" kindref="member">MyArray</ref>&amp;<sp/>ths2,<sp/><ref refid="namespaceSwArrays_1a711e1d51bc667c98e69285d33513165" kindref="member">array1D</ref>&amp;<sp/>res<sp/>)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=n;<sp/>++i)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>res[i]<sp/>=<sp/>mag1<sp/>*<sp/>mags2[i]<sp/>*<sp/>cos(<sp/>th1<sp/>-<sp/>ths2[i]<sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="qperparraynew_8cpp_15e634626e89e347ac7105f3a34a7f065" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_15e634626e89e347ac7105f3a34a7f065" kindref="member">_Iterate2DForZeroes</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>,<sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref>&amp;<sp/>qiqjs,<sp/><ref refid="namespaceSwArrays_143b0dd0a084045f231ca949f96ba5ea1" kindref="member">array3D</ref>&amp;<sp/>sumqiqjs<sp/>)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>go<sp/>through<sp/>all<sp/>the<sp/>possible<sp/>combinations<sp/>of<sp/>zeroed<sp/>columns<sp/>and<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>zeroed(<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z=1;<sp/>z&lt;pow(2,n);<sp/>++z)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>calculate<sp/>the<sp/>array<sp/>of<sp/>zeroed<sp/>bools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceSwUtils_11b9e53b0f01225242c82fe97e878bd6d" kindref="member">_NumberToBoolArray</ref>(<sp/>z,<sp/>zeroed,<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>iterated<sp/>over<sp/>all<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n;<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>++j)<sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>either<sp/>the<sp/>row<sp/>or<sp/>column<sp/>has<sp/>been<sp/>zeroed,<sp/>subtract<sp/>off<sp/>from<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>sumqiqjs[0][i][j];</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ii=i;<sp/>ii&lt;n;<sp/>ii++)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>jj=j;<sp/>jj&lt;n;<sp/>jj++)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>zeroed[ii]<sp/>||<sp/>zeroed[jj]<sp/>)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>-=<sp/>qiqjs[ii][jj];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumqiqjs[z][i][j]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="qperparraynew_8cpp_19b9808a1bf16458a7ebdf81287337ec5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="qperparraynew_8cpp_19b9808a1bf16458a7ebdf81287337ec5" kindref="member">_Iterate1DForZeroes</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>,<sp/><ref refid="namespaceSwArrays_1a711e1d51bc667c98e69285d33513165" kindref="member">array1D</ref>&amp;<sp/>khatqis,<sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref>&amp;<sp/>sumkhatqis<sp/>)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>zeroed(n);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z=1;<sp/>z&lt;pow(2,n);<sp/>++z)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>calculate<sp/>the<sp/>array<sp/>of<sp/>zeroed<sp/>bools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceSwUtils_11b9e53b0f01225242c82fe97e878bd6d" kindref="member">_NumberToBoolArray</ref>(<sp/>z,<sp/>zeroed,<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>iterated<sp/>over<sp/>all<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n;<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>deal<sp/>with<sp/>k<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>sumkhatqis[0][i];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ii=i;<sp/>ii&lt;n;<sp/>++ii)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>zeroed[ii]<sp/>)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>-=<sp/>khatqis[ii];</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumkhatqis[z][i]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="classQperpCalculator_191e6a17cf817e4b361d6bc3187ec2095" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQperpCalculator_191e6a17cf817e4b361d6bc3187ec2095" kindref="member" tooltip="Once the q-perps are set, calculate all the further matrices involving q_i.q_j.">QperpCalculator::CalcQmatrices</ref>()</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>q_i.q_j<sp/>summed<sp/>from<sp/>i<sp/>to<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref><sp/>sumqiqj_iton;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>q_i.q_j<sp/>summed<sp/>from<sp/>j<sp/>to<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="namespaceSwArrays_12293a5bb6167b46d4664971dffad0f90" kindref="member">array2D</ref><sp/>sumqiqj_jton;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>sumqiqj_iton.resize(<sp/>boost::extents[<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>][<ref refid="classQperpCalculator_1450feb266be13364991fba2b883711f2" kindref="member" tooltip="n = dimension, order in opacity, number of q&amp;#39;s to calculate with">n</ref>]<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>sumqiqj_jton.resize(<sp/>boost::extents[n][n]<sp/>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Here,<sp/>we<sp/>pre-calculate<sp/>all<sp/>the<sp/>necessary<sp/>qi.qj<sp/>elements<sp/>and<sp/>their<sp/>useful<sp/>sums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>calculate<sp/>all<sp/>qi.qj<sp/>elements<sp/>and<sp/>khat.qi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><ref refid="qperparraynew_8cpp_17d756d821e729c3031739ae9168483e4" kindref="member">_OuterProduct1D1D</ref>(<sp/>n,<sp/><ref refid="classQperpCalculator_1a8eaec51683b81cf9ae2517b8adaff1b" kindref="member" tooltip="The magnitudes of the q vectors.">qs</ref>,<sp/><ref refid="classQperpCalculator_15b6c7450c187157952abdb77f16be332" kindref="member" tooltip="The polar angles of the q vectors (this is q_perp, ie effectively only 2D vector)...">ths</ref>,<sp/><ref refid="classQperpCalculator_1a8eaec51683b81cf9ae2517b8adaff1b" kindref="member" tooltip="The magnitudes of the q vectors.">qs</ref>,<sp/><ref refid="classQperpCalculator_15b6c7450c187157952abdb77f16be332" kindref="member" tooltip="The polar angles of the q vectors (this is q_perp, ie effectively only 2D vector)...">ths</ref>,<sp/><ref refid="classQperpCalculator_19e589b4cf203e6289b99e459de6ad665" kindref="member" tooltip="Array of vector q_i dot q_j.">qiqj</ref><sp/>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="qperparraynew_8cpp_1fc899dbd2fbe818860b4c384c52fb84f" kindref="member">_OuterProduct0D1D</ref>(<sp/>n,<sp/>1.,<sp/><ref refid="classQperpCalculator_10976c2203a868d6095fd4f7e8d5ce0ca" kindref="member" tooltip="k vector polar angle">thk</ref>,<sp/><ref refid="classQperpCalculator_1a8eaec51683b81cf9ae2517b8adaff1b" kindref="member" tooltip="The magnitudes of the q vectors.">qs</ref>,<sp/><ref refid="classQperpCalculator_15b6c7450c187157952abdb77f16be332" kindref="member" tooltip="The polar angles of the q vectors (this is q_perp, ie effectively only 2D vector)...">ths</ref>,<sp/><ref refid="classQperpCalculator_1eb7a7adbe702a6cd3a94e122fd09178c" kindref="member" tooltip="Array of khat dot q_i (ie khat is unit vector, independent of k magnitude).">khatqi</ref><sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>calculate<sp/>sumqiqj_jton[i][j]<sp/>=<sp/>Sum[<sp/>qiqj[i][jj],<sp/>{jj,<sp/>j,<sp/>n}<sp/>];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ie<sp/>sumqiqj_jton[i][j]<sp/>=<sp/>sumqiqj_iton[i][j+1]<sp/>+<sp/>qiqj[i][j]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sumqiqj_iton[i][j]<sp/>=<sp/>transpose<sp/>sumqiqj_jton[i][j]<sp/>=<sp/>sumqiqj_jton[j][i]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespaceSwArrays_1491d8b119a7cdd28afdaa75447460abf" kindref="member">index2D</ref><sp/>i=0;<sp/>i!=n;<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>sumqiqj_jton[i][n-1]<sp/>=<sp/><ref refid="classQperpCalculator_19e589b4cf203e6289b99e459de6ad665" kindref="member" tooltip="Array of vector q_i dot q_j.">qiqj</ref>[i][n-1];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>sumqiqj_iton[n-1][i]<sp/>=<sp/>sumqiqj_jton[i][n-1];</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespaceSwArrays_1491d8b119a7cdd28afdaa75447460abf" kindref="member">index2D</ref><sp/>j=(n-2);<sp/>j&gt;=0;<sp/>--j)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumqiqj_jton[i][j]<sp/>=<sp/>sumqiqj_jton[i][j+1]<sp/>+<sp/><ref refid="classQperpCalculator_19e589b4cf203e6289b99e459de6ad665" kindref="member" tooltip="Array of vector q_i dot q_j.">qiqj</ref>[i][j];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumqiqj_iton[j][i]<sp/>=<sp/>sumqiqj_jton[i][j];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>calculate<sp/>the<sp/>final<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sumqiqj_itonjton[i][j]<sp/>=<sp/>Sum[<sp/>sumqiq_jton[ii][j],<sp/>{ii,<sp/>i,<sp/>n}<sp/>];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ie<sp/>sumqiqj_itonjton[i][j]<sp/>=<sp/>sumqiqj_itonjton[i+1][j]<sp/>+<sp/>sumqiqj_jton[i][j]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref>[0][n][n]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>++j)<sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref>[0][n][j]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref>[0][n-1][j]<sp/>=<sp/>sumqiqj_jton[n-1][j];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=(n-2);<sp/>i&gt;=0;<sp/>--i)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref>[0][i][j]<sp/>=<sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref>[0][i+1][j]<sp/>+<sp/>sumqiqj_jton[i][j];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>throw<sp/>in<sp/>sumkhatqi_iton[i]<sp/>=<sp/>Sum[<sp/>khatqi[ii],<sp/>{ii,i,n}<sp/>];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ie<sp/>sumkhatqi_iton[i]<sp/>=<sp/>sumkhatqi_iton[i+1]<sp/>+<sp/>khatqi[i]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>[0][n-1]<sp/>=<sp/><ref refid="classQperpCalculator_1eb7a7adbe702a6cd3a94e122fd09178c" kindref="member" tooltip="Array of khat dot q_i (ie khat is unit vector, independent of k magnitude).">khatqi</ref>[n-1];</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=(n-2);<sp/>i&gt;=0;<sp/>--i)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>[0][i]<sp/>=<sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>[0][i+1]<sp/>+<sp/><ref refid="classQperpCalculator_1eb7a7adbe702a6cd3a94e122fd09178c" kindref="member" tooltip="Array of khat dot q_i (ie khat is unit vector, independent of k magnitude).">khatqi</ref>[i];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classQperpCalculator_1280126db21bf9e1304eeef3f770aed71" kindref="member" tooltip="Are we dealing with a correlated medium? 0 = no, 1 = yes.">correlated</ref><sp/>)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>go<sp/>through<sp/>all<sp/>the<sp/>possible<sp/>combinations<sp/>of<sp/>zeroed<sp/>columns<sp/>and<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="qperparraynew_8cpp_15e634626e89e347ac7105f3a34a7f065" kindref="member">_Iterate2DForZeroes</ref>(<sp/>n,<sp/><ref refid="classQperpCalculator_19e589b4cf203e6289b99e459de6ad665" kindref="member" tooltip="Array of vector q_i dot q_j.">qiqj</ref>,<sp/><ref refid="classQperpCalculator_12ff22225aa3702b089674292ddf63cf5" kindref="member" tooltip="Array of q_i.q_j summed from i to n and j to n.">sumqiqj_itonjton</ref><sp/>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="qperparraynew_8cpp_19b9808a1bf16458a7ebdf81287337ec5" kindref="member">_Iterate1DForZeroes</ref>(<sp/>n,<sp/><ref refid="classQperpCalculator_1eb7a7adbe702a6cd3a94e122fd09178c" kindref="member" tooltip="Array of khat dot q_i (ie khat is unit vector, independent of k magnitude).">khatqi</ref>,<sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref><sp/>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>calc<sp/>sumkhatqikhatqj_itonjton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>zmax;<sp/><ref refid="classQperpCalculator_1280126db21bf9e1304eeef3f770aed71" kindref="member" tooltip="Are we dealing with a correlated medium? 0 = no, 1 = yes.">correlated</ref><sp/>?<sp/>zmax<sp/>=<sp/><ref refid="classQperpCalculator_1495417f5f60bfda90c642d5f41dd36c0" kindref="member" tooltip="There are 2^n different permutations of setting each q to zero, pre calculate this...">twotothen</ref>-1<sp/>:<sp/>zmax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z=0;<sp/>z&lt;=zmax;<sp/>++z)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n;<sp/>++i)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>++j)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_17165df38a37208799ef9ec17680349bb" kindref="member" tooltip="Sum of khat.q_i summed from i to n and j to n.">sumkhatqikhatqj_itonjton</ref>[z][i][j]<sp/>=<sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>[z][i]<sp/>+<sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>[z][j];</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_17165df38a37208799ef9ec17680349bb" kindref="member" tooltip="Sum of khat.q_i summed from i to n and j to n.">sumkhatqikhatqj_itonjton</ref>[z][i][n]<sp/>=<sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>[z][i];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;n;<sp/>++j)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_17165df38a37208799ef9ec17680349bb" kindref="member" tooltip="Sum of khat.q_i summed from i to n and j to n.">sumkhatqikhatqj_itonjton</ref>[z][n][j]<sp/>=<sp/><ref refid="classQperpCalculator_1266de6c0b02f77a34f328b4db867e794" kindref="member" tooltip="Sum of khat.q_i summed from i to n.">sumkhatqi_iton</ref>[z][j];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQperpCalculator_17165df38a37208799ef9ec17680349bb" kindref="member" tooltip="Sum of khat.q_i summed from i to n and j to n.">sumkhatqikhatqj_itonjton</ref>[z][n][n]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/simon/Gyulassy/opacity3/src/glv1/qperparraynew.cpp"/>
  </compounddef>
</doxygen>
